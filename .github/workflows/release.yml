on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      publish:
        description: "True to publish release to git, vpm. if false, this creates release asset only"
        type: boolean
        required: false

concurrency:
  group: publish
  cancel-in-progress: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: anatawa12/something-releaser@v2
      - uses: snow-actions/git-config-user@v1.0.0
      - name: Check version is Snapshot
        run: |
          if ! [[ "$(get-version)" = *-SNAPSHOT ]]; then
            echo 'VERSION IS NOT SNAPSHOT' >&2
            exit 1
          fi

      - name: Update Version Name
        id: update-version
        run: |
          set-version "$(version-unsnapshot "$(get-version)")"
          VERSION="$(get-version)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          {
            echo "$VERSION"
            echo "# second line or later may be used for other reason later"
          } > latest.txt

      - name: Commit & tag version
        if: ${{ inputs.publish }}
        run: |
          git commit -am "$VERSION"
          git tag "v$VERSION"

      - name: Prepare build folder
        run: mkdir build

      - name: Create unitypackage
        uses: anatawa12/sh-actions/create-unitypackage@master
        with:
          output-path: build/saver.unitypackage
          package-path: com.anatawa12.console-log-saver
          path-prefix: Assets/com.anatawa12.console-log-saver
      - name: Upload unitypackage
        uses: actions/upload-artifact@v3
        with:
          name: unitypackage
          path: build/saver.unitypackage

      - name: Publish Release
        if: ${{ inputs.publish }}
        run: |
          git push && git push origin "v$VERSION"

      - name: Publish release to github
        if: ${{ inputs.publish }}
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          sleep 1
          # upload release assets
          gh release create "v$VERSION" \
            "build/saver.unitypackage" \

      - name: prepare next release & push
        if: ${{ inputs.publish }}
        run: |
          VERSION="$(version-next "$(get-version)")"
          set-version "$(version-snapshot "$VERSION")"
          git commit -am "prepare for next version: $VERSION"
          git push && git push --tags
